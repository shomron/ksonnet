// Copyright 2018 The ksonnet authors
//
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"
import types "k8s.io/apimachinery/pkg/types"
import unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
import v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// ResourceClient is an autogenerated mock type for the ResourceClient type
type ResourceClient struct {
	mock.Mock
}

// Create provides a mock function with given fields:
func (_m *ResourceClient) Create() (*unstructured.Unstructured, error) {
	ret := _m.Called()

	var r0 *unstructured.Unstructured
	if rf, ok := ret.Get(0).(func() *unstructured.Unstructured); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: options
func (_m *ResourceClient) Delete(options *v1.DeleteOptions) error {
	ret := _m.Called(options)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.DeleteOptions) error); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: options
func (_m *ResourceClient) Get(options v1.GetOptions) (*unstructured.Unstructured, error) {
	ret := _m.Called(options)

	var r0 *unstructured.Unstructured
	if rf, ok := ret.Get(0).(func(v1.GetOptions) *unstructured.Unstructured); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(v1.GetOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: pt, data
func (_m *ResourceClient) Patch(pt types.PatchType, data []byte) (*unstructured.Unstructured, error) {
	ret := _m.Called(pt, data)

	var r0 *unstructured.Unstructured
	if rf, ok := ret.Get(0).(func(types.PatchType, []byte) *unstructured.Unstructured); ok {
		r0 = rf(pt, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.PatchType, []byte) error); ok {
		r1 = rf(pt, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
