// Copyright 2018 The ksonnet authors
//
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import astext "github.com/ksonnet/ksonnet-lib/ksonnet-gen/astext"
import component "github.com/ksonnet/ksonnet/pkg/component"
import mock "github.com/stretchr/testify/mock"

// Module is an autogenerated mock type for the Module type
type Module struct {
	mock.Mock
}

// Components provides a mock function with given fields:
func (_m *Module) Components() ([]component.Component, error) {
	ret := _m.Called()

	var r0 []component.Component
	if rf, ok := ret.Get(0).(func() []component.Component); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]component.Component)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteParam provides a mock function with given fields: path
func (_m *Module) DeleteParam(path []string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Dir provides a mock function with given fields:
func (_m *Module) Dir() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Module) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Params provides a mock function with given fields: envName
func (_m *Module) Params(envName string) ([]component.ModuleParameter, error) {
	ret := _m.Called(envName)

	var r0 []component.ModuleParameter
	if rf, ok := ret.Get(0).(func(string) []component.ModuleParameter); ok {
		r0 = rf(envName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]component.ModuleParameter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(envName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParamsPath provides a mock function with given fields:
func (_m *Module) ParamsPath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Render provides a mock function with given fields: envName, componentNames
func (_m *Module) Render(envName string, componentNames ...string) (*astext.Object, map[string]string, error) {
	_va := make([]interface{}, len(componentNames))
	for _i := range componentNames {
		_va[_i] = componentNames[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, envName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *astext.Object
	if rf, ok := ret.Get(0).(func(string, ...string) *astext.Object); ok {
		r0 = rf(envName, componentNames...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*astext.Object)
		}
	}

	var r1 map[string]string
	if rf, ok := ret.Get(1).(func(string, ...string) map[string]string); ok {
		r1 = rf(envName, componentNames...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, ...string) error); ok {
		r2 = rf(envName, componentNames...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResolvedParams provides a mock function with given fields:
func (_m *Module) ResolvedParams() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetParam provides a mock function with given fields: path, value
func (_m *Module) SetParam(path []string, value interface{}) error {
	ret := _m.Called(path, value)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, interface{}) error); ok {
		r0 = rf(path, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
